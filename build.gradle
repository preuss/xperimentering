plugins {
	id 'java'
	id 'application'
	id 'io.freefair.lombok' version '6.0.0-m2' // You don't need manual dependencies.
}

group 'dk.xpreuss.xperimentering'
version '0.1.0-SNAPSHOT'

//sourceCompatibility = JavaVersion.VERSION_16
//targetCompatibility = JavaVersion.VERSION_14
//java.toolchain.languageVersion = JavaLanguageVersion.of(16)
java {
	//sourceCompatibility = JavaVersion.VERSION_16
	//targetCompatibility = JavaVersion.VERSION_16
	/*
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(16))
	}
	*/
}
application {
	applicationDefaultJvmArgs = ["--add-opens", "--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED"]
}

/**
 * 1st approach: Setting encoding during compilation in Java and Test classes
 */
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = 'UTF-8'

/**
 * 2nd approach: Setting encoding during compilation in Java and Test classes
 *
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}
tasks.withType(Test) {
	systemProperty "file.encoding", "UTF-8"
}
tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
}
 */

repositories {
	mavenCentral()
}

application {
	//applicationDefaultJvmArgs = ["--add-opens java.base/jdk.internal.loader=ALL-UNNAMED"]
	//jvmArgs = ['-Xmx4096m','--add-opens java.base/jdk.internal.loader=ALL-UNNAMED']
	//mainClassName='dk.xpreuss.utils.formatter.custom.MessageFormatter'
	mainClass='dk.xpreuss.utils.formatter.custom.MessageFormatter'
}

dependencies {
	implementation 'io.reactivex.rxjava3:rxjava:3.0.13-RC4'
	implementation 'com.ibm.icu:icu4j:69.1'
	implementation 'net.time4j:time4j-base:5.8'
	implementation 'net.time4j:time4j-tzdata:5.0-2021a'
	implementation 'net.time4j:time4j-sqlxml:5.8'
	implementation 'net.time4j:time4j-ui:5.8'

	implementation 'no.gorandalum:fluent-result:1.5.0'

//	compileOnly 'org.projectlombok:lombok:1.18.20'
//	annotationProcessor 'org.projectlombok:lombok:1.18.20'
//
//	testCompileOnly 'org.projectlombok:lombok:1.18.20'
//	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
//	testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.7.2'
//	testImplementation 'org.junit.platform:junit-platform-commons:1.7.2'

	testImplementation 'org.testng:testng:7.4.0'

	testImplementation 'org.mockito:mockito-core:3.10.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:3.10.0'
	testImplementation 'org.mockito:mockito-testng:0.4.4'

	testImplementation 'org.easymock:easymock:4.3'

	testImplementation 'org.hamcrest:hamcrest:2.2'
}

test {
	useJUnitPlatform()
}
/*
tasks.withType( JavaCompile ).configureEach {
	options.forkOptions.jvmArgs.addAll( ['--add-opens', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'] )
}
*/

println "GRADLE_OPTS: " + System.getenv("GRADLE_OPTS")
//println "File encoding: " + System.getProperty("file.encoding")
//println "file.encoding sys property = " + System.properties["file.encoding"]
println "GRADLE_OPTS env variable = " + System.getenv("GRADLE_OPTS")
println "JAVA_TOOL_OPTIONS env variable = " + System.getenv("JAVA_TOOL_OPTIONS")
println "UTF-8 test: â†“"

