package dk.xpreuss.xperimentering.basex.speedc;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class SpeedCEncoder {
	private static final byte[] BASE64_TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".getBytes();

	public static void main(String[] args) throws InterruptedException {
		final String originalText = "helloæøå½§$€";
//		final String originalText = "æhelloworld";

//		byte[] output = encode(originalText.getBytes());
		byte[] output = encode(originalText.getBytes(StandardCharsets.UTF_8));
		System.out.println("=>" + new String(output) + "<= MY Calculation");
		System.out.println("->" + new String(Base64.getEncoder().encode(originalText.getBytes(StandardCharsets.UTF_8))) + "<- JAVA's own");

		final String textA = "asdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrfasdfælkjasdfælkjasdflkjasdflkjasældkfjasældkfjaæsldkfhjæalsndrvæoislernvælsijrf";
		final int max = 1_000_00;
		long start, end;
		start = System.nanoTime();
		for(int i=0;i<max;i++) {
			final byte [] encodedData = Base64.getEncoder().encode(textA.getBytes(StandardCharsets.UTF_8));
		}
		end = System.nanoTime();
		System.out.println("Time: " + ((double)(end-start))/1_000_000_000 + " sekunder");

		start = System.nanoTime();
		for(int i=0;i<max;i++) {
			final byte [] encodedData = encode(textA.getBytes(StandardCharsets.UTF_8));
		}
		end = System.nanoTime();
		System.out.println("Time: " + ((double)(end-start))/1_000_000_000 + " sekunder");
	}

	/**
	 * Base64 Encoder
	 * Base64 encoding/decoding (RFC1341)
	 * Copyright (c) 2021, Jesper Preuss jesperpreuss@yahoo.dk
	 *
	 * @param src Data to be encoded in bytes
	 * @return the encoded data to bytes, you have to convert to string yourself.
	 */
	public static byte[] encode(final byte[] src) {
		int outLength = 4 * ((src.length + 2) / 3); /* 3-byte blocks to 4-byte */
		byte[] out = new byte[outLength];

		if (outLength < src.length) {
			return new byte[0]; // Integer overflow
		}


		final int srcLength = src.length;
		int srcPos = 0;
		int outPos = 0;

		while ((srcLength - srcPos) >= 3) {
			out[outPos++] = BASE64_TABLE[(src[srcPos] & 0xFF) >> 2];
			out[outPos++] = BASE64_TABLE[((((src[srcPos] & 0xFF) & 0b0000_0011) << 4) | ((src[srcPos + 1] & 0xFF) >> 4))];
			out[outPos++] = BASE64_TABLE[(((src[srcPos + 1] & 0xFF) & 0b0000_1111) << 2) | ((src[srcPos + 2] & 0xFF) >> 6)];
			out[outPos++] = BASE64_TABLE[(src[srcPos + 2] & 0xFF) & 0b0011_1111];
			srcPos += 3;
		}

		if ((srcLength - srcPos) > 0) {
			out[outPos++] = BASE64_TABLE[(src[srcPos] & 0xFF) >> 2];
			if ((srcLength - srcPos) == 1) {
				out[outPos++] = BASE64_TABLE[((src[srcPos] & 0xFF) & 0b0000_0011) << 4];
				out[outPos++] = '=';
			} else {
				out[outPos++] = BASE64_TABLE[(((src[srcPos] & 0xFF) & 0b0000_0011) << 4) | ((src[srcPos + 1] & 0xFF) >> 4)];
				out[outPos++] = BASE64_TABLE[((src[srcPos + 1] & 0xFF) & 0b0000_1111) << 2];
			}
			out[outPos++] = '=';
		}

		return out;
	}
}
